
#-----------------------------------------------------------------------------------------------------------------------
# SERVICES -- MICROSERVICE STACK
#-----------------------------------------------------------------------------------------------------------------------
services:

  product-service:
    image: product-service
    container_name: product-service
    build:
      context: ./product-service
      dockerfile: ./Dockerfile
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  order-service:
    image: order-service
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: ./Dockerfile
    ports:
      - "8085:8085"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-order:5432/order-service
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - pgadmin
      - postgres-order
    networks:
      - spring

  inventory-service:
    image: inventory-service
    container_name: inventory-service
    build:
      context: ./inventory-service
      dockerfile: ./Dockerfile
    ports:
      - "8086:8086"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-inventory:5432/inventory-service
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - pgadmin
      - postgres-inventory
    networks:
      - spring

#---------------------------------------------------------------------------------------------------------------------
# API-GATEWAY
#---------------------------------------------------------------------------------------------------------------------
  api-gateway:
    image: api-gateway
    container_name: api-gateway
    ports:
      - "9000:9000"
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_APPLICATION_JSON: '{"logging":{"level":{"root":"INFO","ca.gbc.apigateway":"DEBUG"}}}'
    networks:
      - spring

#---------------------------------------------------------------------------------------------------------------------
# MONGODB/MONGO-EXPRESS --> MAIN DEPLOYMENT CONFIGURATION
#---------------------------------------------------------------------------------------------------------------------
  mongodb:
    image: mongo:latest
    container_name: initdb-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-db:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:roo
    networks:
      - spring

  mongo-express:
    image: mongo-express
    container_name: local-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      - ME_CONFIG_MONGODB_SERVER=mongodb
    depends_on:
      - mongodb
    networks:
      - spring
#---------------------------------------------------------------------------------------------------------------------
# KEYCLOAK
#---------------------------------------------------------------------------------------------------------------------
  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: ["start-dev", "--import-realm"]
    environment:
       DB_VENDOR: postgres
       DB_ADDR: postgres-keycloak
       DB_DATABASE: keycloak
       DB_USER: admin
       DB_PADDWORD: password
       KEYCLOAK_ADMIN: ADMIN
       KEYCLOAK_ADMIN_PASSWORD: password
       ROOT_LOGLEVEL: DEBUG
       JBOSS+LOG_MANAGER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
       - "8080:8080"
    volumes:
       - ./realms/:/opt/keycloak/data/import
    depends_on:
       - postgres-keycloak
    networks:
       - spring


#--------------------------------------------------------------------------------------------------------------------
# POSTGRES/PGADMIN
#---------------------------------------------------------------------------------------------------------------------
  postgres-keycloak:
    container_name: postgres-keycloak
    image: postgres
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=admin
      - POSTGREST_PASSWORD=password
      - PGDATA=/data/postgres
    volumes:
      - ./data/postgres/postgres-keycloak:/var/lib/postgresql/data
    ports:
      - "5431:5432"
    networks:
      - spring

  postgres-inventory:
    image: postgres
    container_name: postgres-inventory
    restart: unless-stopped # ---- better for local development
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_DB=inventory-service
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - PGDATA=/data/postgres
    volumes:
      - ./data/postgres/postgres-inventory:/var/lib/postgresql/data
      - ./init/postgres/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  postgres-order:
    image: postgres
    container_name: postgres-order
    restart: unless-stopped
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_DB=order-service
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - PGDATA=/data/postgres
    volumes:
      - ./data/postgres/postgres-order:/var/lib/postgresql/data
      - ./init/postgres/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8888:80"
    container_name: pgadmin-single-default
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    networks:
      - spring

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring

  broker:
    image: conflientinc/cp-kafka:7.5.0
    ports:
      - "9092:9092" # external connections (outside of docker) use 9092 and host.docker.internal
      - "29092:29092" # internal connections (inside docekr) and the container hostname breaker
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092, PLAINTEXT_HOST://host.docker.internal:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092, PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeper
    networks:
      - spring

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8087:8087"
    environment:
      KAFKA_CLUSTER_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - broker
    networks:
      - spring



# ----- decoupling from host filesystem to be able to move across environments -- data persistence
volumes:
  mongo-db:
    driver: local

# ----- explicitly defining network as Docker default network can be unpredictable
networks:
  spring:
    driver: bridge
# ------ mongo-express depends on mongodb not the other way around.
# ------ mongo-express is web based, it requires mongodb to run first when
# ------ docker-compose.
# ------ BOTH part of the spring network --> meaning they can communicate


#  postgres:
#    image: postgres
#    container_name: postgres-single-service
#    restart: unless-stopped
#    ports:
#      - "5433:5432"
#    environment:
#      - POSTGRES_DB=postgres-single-service
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=password
#
#    volumes:
#      - ./data/postgres/single-service:/var/lib/postgresql/data
#      - ./docker-infra/postgres/init/postgres/single-service/init.sql:/docker-entrypoint-initdb.d/init.sql