
#-----------------------------------------------------------------------------------------------------------------------
# SERVICES
#-----------------------------------------------------------------------------------------------------------------------
services:

  product-service:
    image: product-service
    container_name: product-service
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  order-service:
    image: order-service
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  inventory-service:
    image: inventory-service
    container_name: inventory-service
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

#---------------------------------------------------------------------------------------------------------------------
# MONGODB/MONGO-EXPRESS --> MAIN DEPLOYMENT CONFIGURATION
#---------------------------------------------------------------------------------------------------------------------
  mongodb:
    image: mongo:latest
    container_name: initdb-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./docker-infra/mongo/data/db:/data/db
      - ./docker-infra/mongo/init/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - spring

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
    depends_on:
      - mongodb
    networks:
      - spring
#---------------------------------------------------------------------------------------------------------------------
# POSTGRES/PGADMIN
#---------------------------------------------------------------------------------------------------------------------
  pg-inventory-service:
    image: postgres:latest
    container_name: pg-inventory-default
    restart: unless-stopped # ---- better for local development
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - ./docker-infra/postgres/data/inventory:/var/lib/postgresql/data
      - ./docker-infra/postgres/init/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  pg-order-service:
    image: postgres:latest
    container_name: pg-order-default
    restart: unless-stopped
    ports:
      - "5436:5432"
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - ./docker-infra/postgres/data/order:/var/lib/postgresql/data
      - ./docker-infra/postgres/init/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-default
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.ca
      PGADMIN_DEFAULT_PASSWORD: password

# ----- decoupling from host filesystem to be able to move across environments -- data persistence
volumes:
  mongo-db:
    driver: local

# ----- explicitly defining network as Docker default network can be unpredictable
networks:
  spring:
    driver: bridge
# ------ mongo-express depends on mongodb not the other way around.
# ------ mongo-express is web based, it requires mongodb to run first when
# ------ docker-compose.
# ------ BOTH part of the spring network --> meaning they can communicate